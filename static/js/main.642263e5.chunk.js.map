{"version":3,"sources":["components/DogsContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["DogsContainer","dog","this","props","breed","split","localStorage","setItem","alert","src","alt","React","Component","App","state","loading","handleClick","bind","fetchDog","event","preventDefault","setState","a","fetch","response","json","jsonResponse","message","className","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6TA2BeA,G,mLArBb,WACE,IAAQC,EAAQC,KAAKC,MAAbF,IACFG,EAAQH,EAAII,MAAM,kCAAkC,GAAGA,MAAM,KAAK,GACxEC,aAAaC,QAAQ,SAAUN,GAC/BO,MAAM,+BAAD,OAA0BJ,M,oBAGjC,WACE,IAAQH,EAAQC,KAAKC,MAAbF,IACR,OACE,6BACE,yBAAKQ,IAAMR,EAAMS,IAAI,U,GAbDC,IAAMC,YCiDnBC,E,kDAhDb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXb,IAAK,GACLc,SAAS,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,qDASnB,WACEf,KAAKgB,a,yBAGP,SAAYC,GACVA,EAAMC,iBACNlB,KAAKgB,a,sBAGP,WAAY,IAAD,OACThB,KAAKmB,SACH,CAAEN,SAAS,GADb,sBAEE,gCAAAO,EAAA,sEACyBC,MAAM,2CAD/B,cACQC,EADR,gBAE6BA,EAASC,OAFtC,cAEQC,EAFR,gBAGqBA,EAHrB,OAGQzB,EAHR,OAGmC0B,QACjC,EAAKN,SAAS,CACZN,SAAS,EACTd,QANJ,+C,oBAYJ,WACE,MAAyBC,KAAKY,MAAtBb,EAAR,EAAQA,IAAKc,EAAb,EAAaA,QACb,OACE,yBAAKa,UAAU,OACb,qCAEEb,EAAU,yBAAKa,UAAU,sBAAf,2BACN,kBAAC,EAAD,CAAe3B,IAAMA,IAE3B,4BAAQ4B,KAAK,SAASC,QAAU5B,KAAKc,aAArC,2B,GA3CUL,IAAMC,WCQJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrB,c","file":"static/js/main.642263e5.chunk.js","sourcesContent":["import React from 'react';\nimport './DogsContainer.css';\nimport PropTypes from 'prop-types';\n\nclass DogsContainer extends React.Component {\n\n  componentDidMount() {\n    const { dog } = this.props;\n    const breed = dog.split('https://images.dog.ceo/breeds/')[1].split('/')[0];\n    localStorage.setItem('urlDog', dog);\n    alert(`A raça do doguinho é: ${breed}`);\n  }\n\n  render() {\n    const { dog } = this.props;\n    return (\n      <div>\n        <img src={ dog } alt=\"\" />\n      </div>\n    );\n  }\n}\n\nDogsContainer.propTypes = {\n  dog: PropTypes.string.isRequired,\n};\n\nexport default DogsContainer;\n","import React from 'react';\nimport './App.css';\nimport DogsContainer from './components/DogsContainer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dog: '',\n      loading: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchDog();\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.fetchDog();\n  }\n\n  fetchDog() {\n    this.setState(\n      { loading: true },\n      async () => {\n        const response = await fetch('https://dog.ceo/api/breeds/image/random');\n        const jsonResponse = await response.json();\n        const dog = (await jsonResponse).message;\n        this.setState({\n          loading: false,\n          dog,\n        });\n      },\n    );\n  }\n\n  render() {\n    const { dog, loading } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>DOGS!</h1>\n        {\n          loading ? <div className=\"doguinho-container\">Click OK to see DA DOG!</div>\n            : <DogsContainer dog={ dog } />\n        }\n        <button type=\"button\" onClick={ this.handleClick }>MOOOOORE DOOOOOGS!</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}